library("raster")
library("RColorBrewer")
library("Rcpp")
library("readr")
library("rgdal")
library("rgeos")
library("rmeta")
library("rstan")
library("rstanarm")
library("scales")
library("smatr")
library("tibble")
library("tidybayes")
library("tidyr")
library("tidyselect")
library("viridis")
library("bayesplot")
library("brms")
library("broom")
library("colorspace")
library("cowplot")
library("dismo")
library("dplyr")
library("extrafont")
library("forcats")
library("gganimate")
library("ggdist")
library("ggmap")
library("ggplot2")
library("ggpubr")
library("ggrepel")
library("ggvis")
library("grid")
library("gridExtra")
library("lattice")
library("lme4")
library("lmodel2")
library("lubridate")
library("maps")
library("mapdata")
library("mapplots")
library("mapproj")
library("maptools")
library("MASS")
library("modelr")
library("patchwork")
library("png")
library("purrr")
library("raster")
library("RColorBrewer")
library("Rcpp")
library("readr")
library("rgdal")
library("rgeos")
library("rmeta")
library("rstan")
library("rstanarm")
library("scales")
library("smatr")
library("tibble")
library("tidybayes")
library("tidyr")
library("tidyselect")
library("viridis")
library("bayesplot")
library("brms")
library("broom")
library("colorspace")
library("cowplot")
library("dismo")
library("dplyr")
library("extrafont")
library("forcats")
library("gganimate")
library("ggdist")
library("ggmap")
library("ggplot2")
library("ggpubr")
library("ggrepel")
library("ggvis")
library("grid")
library("gridExtra")
library("lattice")
library("lme4")
library("lmodel2")
library("lubridate")
library("maps")
library("mapdata")
library("mapplots")
library("mapproj")
library("maptools")
library("MASS")
library("modelr")
library("patchwork")
library("png")
library("purrr")
library("raster")
library("RColorBrewer")
library("Rcpp")
library("readr")
library("rgdal")
library("rgeos")
library("rmeta")
library("rstan")
library("rstanarm")
library("scales")
library("smatr")
library("tibble")
library("tidybayes")
library("tidyr")
library("tidyselect")
library("viridis")
installr()
updateR()
install.packages("installr")
library(installr)
updateR()
setwd("C:/Users/chris/Desktop/Coding Bootcamp/hw/15/MechaCar_Statistical_Analysis/R")
# 3 - Read in Data File ---------------------------------------------------
read.csv("../data/MechaCar_mpg.csv")
# 1 - Load Libraries ------------------------------------------------------
library(dplyr)
suspensionCoil <- read.csv("../data/Suspension_Coil.csv")
# 3 - Read in Data File ---------------------------------------------------
mechaCarMpg_df <- read.csv("../data/MechaCar_mpg.csv")
suspensionCoil_df <- read.csv("../data/Suspension_Coil.csv")
remove(suspensionCoil)
head(mechaCarMpg_df)
summary(mechaCarMpg_df)
describe(mechaCarMpg_df)
names(mechaCarMpg_df)
?lm
# 4 - Linear Regression to Predict MPG ------------------------------------
mpg_lm <- mechaCarMpg %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
# 4 - Linear Regression to Predict MPG ------------------------------------
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
# 4 - Linear Regression to Predict MPG ------------------------------------
sink("mpg_lm.txt")
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
sink()
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary = suspensionCoil_df %>%
summarise()
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarise()
print(total_summary)
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize()
print(total_summary)
total_summary
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- summarize(suspensionCoil_df)
summarize(suspensionCoil_df)
View(total_summary)
library(dplyr)
# 3 - Read in Data File ---------------------------------------------------
mechaCarMpg_df <- read.csv("../data/MechaCar_mpg.csv")
suspensionCoil_df <- read.csv("../data/Suspension_Coil.csv")
# 4 - Linear Regression to Predict MPG ------------------------------------
# Print output to txt file instead of console
# sink("mpg_lm.txt")
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
# Return to printing output in console
# sink()
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- summarize(suspensionCoil_df)
total_summary
# 6 - T-Tests on Suspension Coils -----------------------------------------
?summarise
head(suspensionCoil_df)
View(suspensionCoil_df)
?sd
?summarise
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI),
.groups = 'keep')
total_summary
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI))
total_summary
lot_summary <- suspensionCoil_df %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI),
.groups = 'keep')
lot_summary
View(total_summary)
View(lot_summary)
?group_by
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
group_by() %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI))
total_summary
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI))
total_summary
View(lot_summary)
head(suspensionCoil_df)
names(suspensionCoil_df)
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
select(PSI) %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI))
total_summary
range(suspensionCoil_df[PSI])
range(suspensionCoil_df[,PSI])
range(suspensionCoil_df[,"PSI"])
head(suspensionCoil_df)
mean(suspensionCoil_df[,"PSI"])
median(suspensionCoil_df[,"PSI"])
var(suspensionCoil_df[,"PSI"])
sd(suspensionCoil_df[,"PSI"])
?summarise
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI),
.groups = "drop")
total_summary
library(dplyr)
# 3 - Read in Data File ---------------------------------------------------
mechaCarMpg_df <- read.csv("../data/MechaCar_mpg.csv")
suspensionCoil_df <- read.csv("../data/Suspension_Coil.csv")
# 4 - Linear Regression to Predict MPG ------------------------------------
# Print output to txt file instead of console
# sink("mpg_lm.txt")
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
# Return to printing output in console
# sink()
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI),
.groups = "drop")
total_summary
lot_summary <- suspensionCoil_df %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI),
.groups = 'keep')
lot_summary
# 6 - T-Tests on Suspension Coils -----------------------------------------
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
ungroup() %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = (PSI),
SD_PSI = sd(PSI),
.groups = "drop")
total_summary
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(),
Median_PSI = median(),
Variance_PSI = (),
SD_PSI = sd(),
.groups = "drop")
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(),
Median_PSI = median(),
Variance_PSI = var(),
SD_PSI = sd())
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean("PSI"),
Median_PSI = median("PSI"),
Variance_PSI = var("PSI"),
SD_PSI = sd("PSI"))
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI))
total_summary
library(dplyr)
# 3 - Read in Data File ---------------------------------------------------
mechaCarMpg_df <- read.csv("../data/MechaCar_mpg.csv")
suspensionCoil_df <- read.csv("../data/Suspension_Coil.csv")
# 4 - Linear Regression to Predict MPG ------------------------------------
# Print output to txt file instead of console
# sink("mpg_lm.txt")
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
# Return to printing output in console
# sink()
# 5 - Summary Statistics on Suspension Coils ------------------------------
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI))
total_summary
lot_summary <- suspensionCoil_df %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI),
.groups = 'keep')
lot_summary
# 6 - T-Tests on Suspension Coils -----------------------------------------
View(total_summary)
write.table(total_summary, "total_summary.txt", sep = ",")
write.table(lot_summary, "lot_summary.txt", sep = ",")
write.csv(total_summary, "total_summary.csv", sep = ",")
write.csv(lot_summary, "lot_summary.csv", sep = ",")
write.csv(total_summary, "total_summary.csv")
write.csv(lot_summary, "lot_summary.csv")
?write.csv
write.csv(total_summary, "total_summary.csv", row.names = FALSE)
write.csv(lot_summary, "lot_summary.csv", row.names = FALSE)
?t.test
# 6 - T-Tests on Suspension Coils -----------------------------------------
mechaCarMpg_df %>%
select(PSI) %>%
t.test(mu = 1500)
# 6 - T-Tests on Suspension Coils -----------------------------------------
suspensionCoil_df %>%
t.test(PSI, mu = 1500)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
suspensionCoil_df %>%
t.test(PSI, mu = 1500, subset(Manufacturing_Lot == "Lot 1"))
View(suspensionCoil_df)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(Manufacturing_Lot == "Lot 1"))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df$Manufacturing_Lot == "Lot 1"))
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(data = suspensionCoil_df, x = PSI, mu = 1500)
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df$Manufacturing_Lot == "Lot 1")
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = [suspensionCoil_df$Manufacturing_Lot == "Lot 1",])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df$Manufacturing_Lot == "Lot 1"))
?subset
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot 1"))
View(lot_summary)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot1"))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(Manufacturing_Lot == "Lot1"))
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
?t.test()
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot1"])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot1",])
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot1",])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot1"))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot2"))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot3"))
?subset
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot3"), select = [,])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot3"), select = [, :])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot3"))
?t.test()
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot3"])
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot1"])
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset = suspensionCoil_df[Manufacturing_Lot == "Lot1"])
?subset
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot1", select = 1:ncol(suspensionCoil_df)))
View(suspensionCoil_df)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot1", select = 1:3)))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot1", select = 1:3))
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot2", select = 1:3))
View(suspensionCoil_df)
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500, subset(suspensionCoil_df, Manufacturing_Lot == "Lot2", select = VehicleID:PSI))
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Create subsets of data for each lot
Lot1_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot1")
library(dplyr)
# 3 - Read in Data File ---------------------------------------------------
mechaCarMpg_df <- read.csv("../data/MechaCar_mpg.csv")
suspensionCoil_df <- read.csv("../data/Suspension_Coil.csv")
# 4 - Linear Regression to Predict MPG ------------------------------------
# Print output to file instead of console
# sink("mpg_lm_output.txt")
# Write multiple regression to determine if correlation between mpg and other metrics
mpg_lm <- mechaCarMpg_df %>%
lm(formula = mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD)
summary(mpg_lm)
# Return to printing output to console
# sink()
# 5 - Summary Statistics on Suspension Coils ------------------------------
# Retrieve summary statistics for entire Suspension_Coil data set
total_summary <- suspensionCoil_df %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI))
total_summary
# Group data set by lot and retrieve summary statistics
lot_summary <- suspensionCoil_df %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean_PSI = mean(PSI),
Median_PSI = median(PSI),
Variance_PSI = var(PSI),
SD_PSI = sd(PSI),
.groups = 'keep')
lot_summary
write.csv(total_summary, "total_summary.csv", row.names = FALSE)
write.csv(lot_summary, "lot_summary.csv", row.names = FALSE)
# 6 - T-Tests on Suspension Coils -----------------------------------------
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Create subsets of data for each lot
Lot1_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot1")
Lot2_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot2")
Lot3_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot3")
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(Lot1_df$PSI, mu = 1500)
# Determine if PSI of Lot 2 differs from pop. mean of 1500.
t.test(Lot2_df$PSI, mu = 1500)
# Determine if PSI of Lot 3 differs from pop. mean of 1500.
t.test(Lot3_df$PSI, mu = 1500)
# Print output to file instead of console
sink("ttest_output.txt")
# Determine if PSI across all manufacturing lots is statistically different
# from the pop. mean of 1500.
t.test(suspensionCoil_df$PSI, mu = 1500)
# Create subsets of data for each lot
Lot1_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot1")
Lot2_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot2")
Lot3_df <- suspensionCoil_df %>% filter(Manufacturing_Lot == "Lot3")
# Determine if PSI of Lot 1 differs from pop. mean of 1500.
t.test(Lot1_df$PSI, mu = 1500)
# Determine if PSI of Lot 2 differs from pop. mean of 1500.
t.test(Lot2_df$PSI, mu = 1500)
# Determine if PSI of Lot 3 differs from pop. mean of 1500.
t.test(Lot3_df$PSI, mu = 1500)
# Return to printing output to console
sink()
